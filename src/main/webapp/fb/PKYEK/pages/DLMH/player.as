package{	import fl.events.SliderEvent;		import flash.display.Loader;	import flash.display.MovieClip;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.events.TimerEvent;	import flash.media.Video;	import flash.net.URLLoader;	import flash.net.URLRequest;	import flash.system.Security;	import flash.utils.Timer;	import flash.geom.ColorTransform;		public class player extends MovieClip	{		private var loader:Loader = new Loader();		private var video_player:Object;		private var urlString:String = "";		private var timer:Timer = new Timer(10);		public function player()		{						Security.allowDomain("*");			Security.allowInsecureDomain("*");			super();			init();			registerEvents();		}				private function init():void		{			// The player SWF file on www.youtube.com needs to communicate with your host			// SWF file. Your code must call Security.allowDomain() to allow this			// communication.			Security.allowDomain("*");			Security.allowInsecureDomain("*");			// This will hold the API player instance once it is initialized.			loader.contentLoaderInfo.addEventListener(Event.INIT, onLoaderInit);			loader.load(new URLRequest("http://www.youtube.com/apiplayer?version=3"));						function onLoaderInit(event:Event):void 			{				player_mc.addChild(loader);				loader.content.addEventListener("onReady", onPlayerReady);				loader.content.addEventListener("onError", onPlayerError);				loader.content.addEventListener("onStateChange", onPlayerStateChange);				loader.content.addEventListener("onPlaybackQualityChange", 				onVideoPlaybackQualityChange);			}						function onPlayerReady(event:Event):void 			{				// Event.data contains the event parameter, which is the Player API ID 				trace("player ready:", Object(event).data);				// Once this event has been dispatched by the player, we can use				// cueVideoById, loadVideoById, cueVideoByUrl and loadVideoByUrl				// to load a particular YouTube video.				video_player = loader.content;				//player.cueVideoByUrl(urlString);				video_player.loadVideoById("eWl4-INjH2Y");				// Set appropriate player dimensions for your application				video_player.setSize(430, 240);								loader.content.addEventListener("onStateChange", stateChangeHandler);							}									function stateChangeHandler(event:Event):void			{				trace("player.getCurrentTime",event["data"]);				player_mc.addChild(player_mc.seekBar);				player_mc.seekBar.minimum = 0;				player_mc.seekBar.maximum = video_player.getDuration();				if(event["data"] == 1)				{										timer.addEventListener(TimerEvent.TIMER,handleTimer);					timer.start();				}				else				{					timer.stop();				}			}						function handleTimer(event:TimerEvent):void			{				var colorTransform:ColorTransform = logoMask.transform.colorTransform;				trace("get current durationnnn",video_player.getCurrentTime());				player_mc.seekBar.value = video_player.getCurrentTime();				if(video_player.getCurrentTime() > 29)				{					colorTransform.color = 0xFFBC00;				}				else				{					colorTransform.color = 0x000000;				}				MovieClip(logoMask).transform.colorTransform = colorTransform;			}						function onPlayerError(event:Event):void 			{				// Event.data contains the event parameter, which is the error code				trace("player error:", Object(event).data);			}						function onPlayerStateChange(event:Event):void 			{				// Event.data contains the event parameter, which is the new player state				trace("player state:", Object(event).data);			}						function onVideoPlaybackQualityChange(event:Event):void 			{				// Event.data contains the event parameter, which is the new video quality				trace("video quality:", Object(event).data);			}		}			private function registerEvents():void	{		player_mc.play_btn.addEventListener(MouseEvent.CLICK,handlePlayBtnClicked);		player_mc.pause_btn.addEventListener(MouseEvent.CLICK,handlePauseClicked);		player_mc.seekBar.addEventListener(SliderEvent.THUMB_PRESS,handleSliderChangeEvents);		player_mc.seekBar.addEventListener(SliderEvent.THUMB_RELEASE,handleSliderChangeEvents);			}		function handleSliderChangeEvents(event:Event):void	{		switch(event.type)		{			case SliderEvent.THUMB_PRESS:				video_player.pauseVideo();				break;						case SliderEvent.THUMB_RELEASE:				video_player.seekTo(player_mc.seekBar.value,false);				video_player.playVideo();				break;		}	}			private function handlePlayBtnClicked(event:MouseEvent):void	{		trace("playBtn Clicked");		video_player.playVideo();	}				private function handlePauseClicked(event:MouseEvent):void	{		trace("pause Button Clicked");		video_player.pauseVideo();	}		}}